name: Test Execute Test
description: |
  Execute the tests for the specified operating system, architecture, runtime type, target framework, and build configuration.
  You can use `target_framework` for a single test or `target_framework_array` for multiple tests.

inputs:
  os:
    description: 'The operating system to use'
    required: true
  architecture:
    description: 'The architecture to use'
    required: true
  runtime-type:
    description: 'Values: "dotnet", "mono", "fx"'
    required: true
  target_framework:
    description: 'The target framework to use'
    required: true
  target_framework_array:
    description: 'The target frameworks to use'
    required: true
  build_configuration:
    description: 'The build configuration to use'
    required: true
  manual_build:
    description: 'Whether to build manually before running the tests'
    required: true
  upload_tests:
    description: 'Whether to upload the test results'
    required: true
  experimental:
    description: 'Whether the tests are mandatory for the build to pass'
    required: true

runs:
  using: "composite"
  steps:
    - name: Get Program Files path for ${{inputs.architecture}}
      uses: ./.github/actions/get-program-files
      id: get-program-files
      with:
        architecture: ${{inputs.architecture}}

    - name: Set Test Args
      id: test-args
      run: |
        $run_settings_args = 'NUnit.DefaultTestNamePattern="{C}:{m}{a}" RunConfiguration.TargetPlatform=${{inputs.architecture}}';
        "run_settings_args=$run_settings_args" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
        
        # Ensure TRX files go to a predictable location: ./TestResults
        $vstest = "--logger:trx;LogFileName=${{inputs.os}}-${{inputs.architecture}}-${{inputs.runtime-type}}-${{inputs.build_configuration}}-{framework}.trx --logger:'console;verbosity=normal' --blame";
        "vstest=$vstest" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
        
        $dotnet = "--logger:trx;LogFileName=${{inputs.os}}-${{inputs.architecture}}-${{inputs.runtime-type}}-${{inputs.build_configuration}}-{framework}.trx --logger:console;verbosity=normal --blame";
        "dotnet=$dotnet" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
        
        $target_framework = "${{inputs.target_framework}}";
        $target_frameworks = "${{inputs.target_framework_array}}";
        if ($target_frameworks -eq '') {
          $target_frameworks = "'['$target_framework']'";
        }
        "target_frameworks=$target_frameworks" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
      shell: pwsh

    - name: Build if required
      if: ${{inputs.manual_build == 'true'}}
      run: |
        foreach ($target_framework in ConvertFrom-Json "${{steps.test-args.outputs.target_frameworks}}") {
          dotnet build HarmonyTests/HarmonyTests.csproj -c ${{inputs.build_configuration}} -f $target_framework;
        }
      shell: pwsh

    - name: Perform Tests Windows FX/Mono
      if: ${{inputs.os == 'windows' && (inputs.runtime-type == 'fx' || inputs.runtime-type == 'mono')}}
      run: |
        $mono = "${{steps.get-program-files.outputs.path}}/Mono/bin/mono.exe";
       
        $vspath = vswhere -latest -property installationPath;
        $vstest = join-path $vspath "Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe";
    
        foreach ($target_framework in ConvertFrom-Json "${{steps.test-args.outputs.target_frameworks}}") {
          $loggerArg = "${{steps.test-args.outputs.vstest}}".Replace("{framework}", $target_framework);
          & ${{(inputs.runtime-type == 'mono' && '"$mono"') || ''}} "$vstest" "HarmonyTests/bin/${{inputs.build_configuration}}/$target_framework/HarmonyTests.dll" --framework:$target_framework $loggerArg -- ${{steps.test-args.outputs.run_settings_args}};
        }
      shell: pwsh
      
    - name: Perform Tests Windows .NET | Ubuntu .NET/Mono
      if: ${{(inputs.os == 'windows' && inputs.runtime-type == 'dotnet') || inputs.os == 'ubuntu'}}
      run: |
        foreach ($target_framework in ConvertFrom-Json "${{steps.test-args.outputs.target_frameworks}}") {
          $loggerArg = "${{steps.test-args.outputs.dotnet}}".Replace("{framework}", $target_framework);
          dotnet test "HarmonyTests/bin/${{inputs.build_configuration}}/$target_framework/HarmonyTests.dll" -f $target_framework $loggerArg -- ${{steps.test-args.outputs.run_settings_args}};
        }
      shell: pwsh

    - name: Perform Tests MacOS/MacOS-arm64 .NET/Mono
      uses: nick-fields/retry@v3
      if: ${{inputs.os == 'macos' || inputs.os == 'macos-arm64'}}
      with:
        timeout_minutes: 45
        max_attempts: 3
        retry_on: timeout
        command: |
          if ('${{inputs.os == 'macos-arm64' && inputs.architecture == 'x64' && inputs.runtime-type == 'dotnet'}}' -eq 'true') {
            $dotnet = '/Users/runner/.dotnet/x64/dotnet';
          } else {
            $dotnet = '/Users/runner/.dotnet/dotnet';
          }
          foreach ($target_framework in ConvertFrom-Json "${{steps.test-args.outputs.target_frameworks}}") {
            $loggerArg = "${{steps.test-args.outputs.dotnet}}".Replace("{framework}", $target_framework);
            & $dotnet test "HarmonyTests/bin/${{inputs.build_configuration}}/$target_framework/HarmonyTests.dll" -f $target_framework $loggerArg -- ${{steps.test-args.outputs.run_settings_args}};
          }
        shell: pwsh
        
    # Debug step for Windows
    - name: List TRX files (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Host "Searching for TRX files on Windows..."
        Write-Host "TRX files in current directory:"
        Get-ChildItem -Path . -Filter *.trx -Recurse | ForEach-Object { Write-Host $_.FullName }
        
        Write-Host "TRX files in TestResults directory (if exists):"
        if (Test-Path -Path .\TestResults) {
          Get-ChildItem -Path .\TestResults -Filter *.trx -Recurse | ForEach-Object { Write-Host $_.FullName }
        } else {
          Write-Host "TestResults directory not found"
        }
        
        Write-Host "Content of the current directory:"
        Get-ChildItem -Path . | ForEach-Object { Write-Host $_.Name }
      shell: pwsh
      
    # Debug step for Unix-based systems (macOS/Linux)
    - name: List TRX files (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Searching for TRX files on Unix..."
        echo "TRX files in current directory:"
        find . -name "*.trx" -type f | sort
        
        echo "TRX files in TestResults directory (if exists):"
        if [ -d "./TestResults" ]; then
          find ./TestResults -name "*.trx" -type f | sort
        else
          echo "TestResults directory not found"
        fi
        
        echo "Content of the current directory:"
        ls -la
      shell: bash

    - name: Upload Test Result
      uses: ./.github/actions/test-upload-result
      if: ${{(inputs.upload_tests == 'true') && (always() || failure())}}
      with:
        os: ${{inputs.os}}
        architecture: ${{inputs.architecture}}
        runtime-type: ${{inputs.runtime-type}}
        target_framework: ${{inputs.target_framework}}
        build_configuration: ${{inputs.build_configuration}}
        experimental: ${{inputs.experimental == 'true'}}
