<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>netstandard2.0;net35;net452;net472;net48;netcoreapp3.0;netcoreapp3.1;net5.0;net6.0;net7.0</TargetFrameworks>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<Product>Harmony</Product>
		<Company>Andreas Pardeike</Company>
		<Copyright>Copyright Â© 2016</Copyright>
		<Description>A general non-destructive patch library for .NET and Mono modules</Description>
		<PackageId>Lib.Harmony</PackageId>
		<Authors>Andreas Pardeike</Authors>
		<AssemblyName>0Harmony</AssemblyName>
		<SignAssembly>true</SignAssembly>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageProjectUrl>https://github.com/pardeike/Harmony</PackageProjectUrl>
		<PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
		<PackageTags>Harmony,Mono,Patch,Patching,Runtime,Detour,Detours,Aspect,Aspects</PackageTags>
		<PackageIcon>HarmonyLogo.png</PackageIcon>
		<PackageIconUrl>https://raw.githubusercontent.com/pardeike/Harmony/master/HarmonyLogo.png</PackageIconUrl>
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
		<LogFile>obj/docfx-$(TargetFramework).log</LogFile>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<LangVersion>preview</LangVersion>
		<DefaultItemExcludes>$(DefaultItemExcludes);Documentation/**</DefaultItemExcludes>
		<CheckEolTargetFramework>false</CheckEolTargetFramework>
		<NoWarn>$(NoWarn);SYSLIB0011</NoWarn>
		<Version>$(HarmonyVersion)</Version>
		<AssemblyVersion>$(HarmonyVersion)</AssemblyVersion>
		<FileVersion>$(HarmonyVersion)</FileVersion>
		<PackageVersion>$(HarmonyVersion)$(HarmonyPrerelease)</PackageVersion>
		<InformationalVersion>$(HarmonyVersion)$(HarmonyPrerelease)</InformationalVersion>
		<NoWarn>$(NoWarn);NU5131</NoWarn>
	</PropertyGroup>

	<!-- In .NET 5.0 Binary Formatters are off by default.  Support is added for .NET 5.0+ for fallback JSON Serialization -->
	<Choose>
		<When Condition="'$(TargetFramework)'=='net5.0' Or '$(TargetFramework)'=='net6.0' Or '$(TargetFramework)'=='net7.0'">
			<PropertyGroup>
				<IsNET5OrGreater>true</IsNET5OrGreater>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<IsNET5OrGreater>false</IsNET5OrGreater>
			</PropertyGroup>
		</Otherwise>
	</Choose>
	
	<Choose>
		<!--
		Ideally would check for .NET Core and .NET 5.0+ via TargetFrameworkIdentifier being .NETCoreApp, but that property isn't defined at this point,
		so instead, relying on the fact that all .NET Core and .NET 5.0+ (and .NET Standard) have a period in their TFMs.
		-->
		<When Condition="$(TargetFramework.Contains('.'))">
			<PropertyGroup>
				<IsCoreOrStandard>true</IsCoreOrStandard>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<IsCoreOrStandard>false</IsCoreOrStandard>
				<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<ItemGroup>
		<None Include="..\README.md" Pack="true" PackagePath="" />
		<None Include="..\LICENSE" Pack="true" PackagePath="" />
		<None Include="..\HarmonyLogo.png" Pack="true" Visible="false" PackagePath="" />
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Debug'">
		<Optimize>false</Optimize>
		<DebugType>full</DebugType>
		<DebugSymbols>true</DebugSymbols>
		<DefineConstants>DEBUG</DefineConstants>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Release'">
		<Optimize>true</Optimize>
		<DebugType>none</DebugType>
		<DebugSymbols>false</DebugSymbols>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="MonoMod.Core" Version="$(MonoModCoreVersion)" />
		<!-- Reference assemblies are needed for non-Windows .NET Framework targeting builds. -->
		<PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.3" PrivateAssets="all" />
	</ItemGroup>

	<!-- netstandard2.0 reference assemblies -->
	<PropertyGroup Condition="$(TargetFramework) == 'netstandard2.0'">
		<!-- Remove from /lib in NuGet -->
		<IncludeBuildOutput>false</IncludeBuildOutput>
		<!-- Create reference Assemblies instead of a full assembly -->
		<ProduceOnlyReferenceAssembly>true</ProduceOnlyReferenceAssembly>
		<!-- Add our target for packing -->
		<TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);AddRefAssemblyToPackage</TargetsForTfmSpecificContentInPackage>
	</PropertyGroup>
	<ItemGroup Condition="$(TargetFramework) == 'netstandard2.0'">
		<!-- Adding System.Reflection.Emit to because there are public types exposed from its's package -->
		<PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
	</ItemGroup>
	<Target Name="AddRefAssemblyToPackage" Condition="$(TargetFramework) == 'netstandard2.0'">
		<ItemGroup>
			<!-- Adding the Reference Assembly and the xml documentation to /ref of NuGet -->
			<TfmSpecificPackageFile Include="$(OutDir)$(AssemblyName).dll">
				<PackagePath>ref/netstandard2.0</PackagePath>
			</TfmSpecificPackageFile>
			<TfmSpecificPackageFile Include="$(OutDir)$(AssemblyName).xml">
				<PackagePath>ref/netstandard2.0</PackagePath>
			</TfmSpecificPackageFile>
		</ItemGroup>
	</Target>

	<ItemGroup Condition="$(IsNET5OrGreater)">
		<PackageReference Include="System.Text.Json" Version="5.0.2" />
	</ItemGroup>
	<ItemGroup Condition="!$(IsNET5OrGreater)">
		<Compile Remove="**\*.net5.cs" />
		<Compile Remove="**\*.net6.cs" />
		<Compile Remove="**\*.net7.cs" />
	</ItemGroup>

	<Target Name="RemoveOldNuGetPackages" BeforeTargets="PreBuildEvent">
		<PropertyGroup>
			<WorkingDirectory>$(MSBuildThisFileDirectory)bin\$(Configuration)</WorkingDirectory>
		</PropertyGroup>
		<ItemGroup>
			<OldNugetPackages Include="$(WorkingDirectory)\$(PackageId).*.nupkg" Exclude="$(WorkingDirectory)\$(PackageId).$(Version).nupkg" />
		</ItemGroup>
		<Delete Files="@(OldNugetPackages)" />
	</Target>

	<Target Name="Zip" AfterTargets="Pack" DependsOnTargets="CleanZip" Condition="'$(Configuration)'=='Release'">
		<ZipDirectory SourceDirectory="$(MSBuildThisFileDirectory)bin\$(Configuration)" DestinationFile="$(MSBuildThisFileDirectory)bin\Harmony.$(Version).zip" Overwrite="true" />
	</Target>

	<Target Name="CleanZip" AfterTargets="Clean">
		<ItemGroup>
			<OldZipFiles Include="$(MSBuildThisFileDirectory)bin\*.zip" />
		</ItemGroup>
		<Delete Files="@(OldZipFiles)" />
	</Target>

</Project>
