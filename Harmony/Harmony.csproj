<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net35;net45;net472;net48;netcoreapp3.0;netcoreapp3.1;net5.0;net6.0;netstandard2.1</TargetFrameworks>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<Product>Harmony</Product>
		<Company>Andreas Pardeike</Company>
		<Copyright>Copyright Â© 2016</Copyright>
		<Description>A general non-destructive patch library for .NET and Mono modules</Description>
		<PackageId>Lib.Harmony</PackageId>
		<Authors>Andreas Pardeike</Authors>
		<AssemblyName>0Harmony</AssemblyName>
		<SignAssembly>true</SignAssembly>
		<Version>$(HarmonyVersion)</Version>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<PackageProjectUrl>https://github.com/pardeike/Harmony</PackageProjectUrl>
		<PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
		<PackageTags>Harmony,Mono,Patch,Patching,Runtime,Detour,Detours,Aspect,Aspects</PackageTags>
		<AssemblyVersion>$(HarmonyVersion)</AssemblyVersion>
		<FileVersion>$(HarmonyVersion)</FileVersion>
		<PackageIcon>HarmonyLogo.png</PackageIcon>
		<PackageIconUrl>https://raw.githubusercontent.com/pardeike/Harmony/master/HarmonyLogo.png</PackageIconUrl>
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
		<LogFile>obj/docfx-$(TargetFramework).log</LogFile>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<LangVersion>preview</LangVersion>
		<DefaultItemExcludes>$(DefaultItemExcludes);Documentation/**</DefaultItemExcludes>
		<CheckEolTargetFramework>false</CheckEolTargetFramework>
		<NoWarn>$(NoWarn);SYSLIB0011</NoWarn>
	</PropertyGroup>

	<!-- In .NET 5.0 Binary Formatters are off by default.  Support is added for .NET 5.0+ for fallback JSON Serialization -->
	<Choose>
		<When Condition="'$(TargetFramework)'=='net5.0' Or '$(TargetFramework)'=='net6.0'">
			<PropertyGroup>
				<IsNET5OrGreater>true</IsNET5OrGreater>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<IsNET5OrGreater>false</IsNET5OrGreater>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<Choose>
		<!--
		Ideally would check for .NET Core and .NET 5.0+ via TargetFrameworkIdentifier being .NETCoreApp, but that property isn't defined at this point,
		so instead, relying on the fact that all .NET Core and .NET 5.0+ (and .NET Standard) have a period in their TFMs.
		-->
		<When Condition="$(TargetFramework.Contains('.'))">
			<PropertyGroup>
				<IsCoreOrStandard>true</IsCoreOrStandard>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<IsCoreOrStandard>false</IsCoreOrStandard>
				<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!-- ILRepack config needs to be specified before MonoMod.Common PackageReference due its dependency on properties defined here. -->
	<Choose>
		<When Condition="!$(IsCoreOrStandard) And '$(Configuration)'=='Release'">
			<PropertyGroup>
				<ILRepackInternalize>true</ILRepackInternalize>
			</PropertyGroup>
			<Choose>
				<!-- See ExecILRepack target below. -->
				<When Condition="$([System.Environment]::GetEnvironmentVariable('DYLD_FALLBACK_LIBRARY_PATH'))=='' And $([MSBuild]::IsOsPlatform('OSX'))">
					<PropertyGroup>
						<DoILRepack>false</DoILRepack>
						<DoExecILRepack>true</DoExecILRepack>
					</PropertyGroup>
				</When>
				<Otherwise>
					<PropertyGroup>
						<DoILRepack>true</DoILRepack>
						<DoExecILRepack>false</DoExecILRepack>
					</PropertyGroup>
				</Otherwise>
			</Choose>
		</When>
		<Otherwise>
			<PropertyGroup>
				<ILRepackInternalize>false</ILRepackInternalize>
				<DoILRepack>false</DoILRepack>
				<DoExecILRepack>false</DoExecILRepack>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<ItemGroup>
		<None Include="..\LICENSE" Pack="true" PackagePath="" />
		<None Include="..\HarmonyLogo.png" Pack="true" Visible="false" PackagePath="" />
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Debug'">
		<Optimize>false</Optimize>
		<DebugType>full</DebugType>
		<DebugSymbols>true</DebugSymbols>
		<DefineConstants>DEBUG</DefineConstants>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Release'">
		<Optimize>true</Optimize>
		<DebugType>none</DebugType>
		<DebugSymbols>false</DebugSymbols>
	</PropertyGroup>

	<PropertyGroup Condition="$(IsNET5OrGreater)">
		<DefineConstants>$(DefineConstants);NET50_OR_GREATER</DefineConstants>
	</PropertyGroup>

	<ItemGroup>
		<!-- https://dev.azure.com/MonoMod/MonoMod/_packaging?_a=feed&feed=DevBuilds -->
		<PackageReference Include="MonoMod.Common" Version="$(MonoModCommonVersion)">
			<PrivateAssets Condition="$(ILRepackInternalize)">all</PrivateAssets>
		</PackageReference>

		<!-- Reference assemblies are needed for non-Windows .NET Framework targeting builds. -->
		<PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all" />

		<!--
		See ILRepack config above.
		Version 2.1.15+ currently doesn't work on Linux and macOS (results in "Current platform not supported. Unable to find .NET Framework root"),
		WE MUST USE VERSION 2.1.14 HERE FOR NOW!
		-->
		<PackageReference Include="ILRepack.Lib.MSBuild" Version="2.1.14" PrivateAssets="all" />
	</ItemGroup>

	<ItemGroup Condition="$(IsNET5OrGreater)">
		<PackageReference Include="System.Text.Json" Version="5.0.2" />
	</ItemGroup>
	<ItemGroup Condition="!$(IsNET5OrGreater)">
		<Compile Remove="**\*.net5.cs" />
		<Compile Remove="**\*.net6.cs" />
		<Compile Remove="**\*.net7.cs" />
	</ItemGroup>

	<!--
	On macOS .NET Framework builds, ILRepack uses Mono.Posix package for copying file permissions, but this problematic because:
	1) Its P/Invoke usage relies on dynamic linking with the native libs (specifically, libMonoPosixHelper.dylib) of the Mono install(s),
		(which are typically rooted at /Library/Frameworks/Mono.framework).
	2) Mono.Posix.dll's dynamic linking doesn't specify absolute paths, so it relies on DYLD_* environment variables for searching for the dylib.
	3) However, these DYLD_* environment variables are often unset in modern macOS due to SIP:
		https://developer.apple.com/library/archive/documentation/Security/Conceptual/System_Integrity_Protection_Guide/RuntimeProtections/RuntimeProtections.html
	This results in "Unable to load shared library 'MonoPosixHelper' ... at Mono.Unix.Native.Syscall.stat..." errors.

	Workaround:
	We default DYLD_FALLBACK_LIBRARY_PATH to what's supposed to be its default value, prepended by Mono's lib folder.
	However, dyld already initializes and reads DYLD_* env vars before any target is run (even before InitialTargets targets),
	so we must spawn a new process via the Exec task that sets DYLD_* env vars and runs msbuild on the ILRepack target.
	Furthermore, DYLD_* env vars aren't inherited (even if specified via Exec's EnvironmentVariables attribute), probably due to SIP,
	so we must set DYLD_* env vars within the Exec'd command itself.
	-->
	<Target Name="ExecILRepack" AfterTargets="PostBuildEvent" Condition="$(DoExecILRepack)">
		<PropertyGroup>
			<DYLD_FALLBACK_LIBRARY_PATH>/Library/Frameworks/Mono.framework/Versions/Current/lib:$(HOME)/lib:/usr/local/lib:/lib:/usr/lib</DYLD_FALLBACK_LIBRARY_PATH>
			<MSBuildCmd Condition="'$(MSBuildRuntimeType)'!='Core'">"$(MSBuildToolsPath)\MSBuild.exe"</MSBuildCmd>
			<MSBuildCmd Condition="'$(MSBuildRuntimeType)'=='Core'">"$(DOTNET_HOST_PATH)" msbuild</MSBuildCmd>
			<MSBuildCmdArgs>"-p:TargetFramework=$(TargetFramework);Configuration=$(Configuration);DoILRepack=true" -t:ILRepack</MSBuildCmdArgs>
		</PropertyGroup>
		<Exec Command="export DYLD_FALLBACK_LIBRARY_PATH=$(DYLD_FALLBACK_LIBRARY_PATH); $(MSBuildCmd) $(MSBuildCmdArgs)" />
	</Target>

	<Target Name="RemoveOldNuGetPackages" BeforeTargets="PreBuildEvent">
		<PropertyGroup>
			<WorkingDirectory>$(MSBuildThisFileDirectory)bin\$(Configuration)</WorkingDirectory>
		</PropertyGroup>
		<ItemGroup>
			<OldNugetPackages Include="$(WorkingDirectory)\$(PackageId).*.nupkg" Exclude="$(WorkingDirectory)\$(PackageId).$(Version).nupkg" />
		</ItemGroup>
		<Delete Files="@(OldNugetPackages)" />
	</Target>

	<Target Name="Zip" AfterTargets="Pack" DependsOnTargets="CleanZip" Condition="'$(Configuration)'=='Release'">
		<ZipDirectory SourceDirectory="$(MSBuildThisFileDirectory)bin\$(Configuration)" DestinationFile="$(MSBuildThisFileDirectory)bin\Harmony.$(Version).zip" Overwrite="true" />
	</Target>

	<Target Name="CleanZip" AfterTargets="Clean">
		<ItemGroup>
			<OldZipFiles Include="$(MSBuildThisFileDirectory)bin\*.zip" />
		</ItemGroup>
		<Delete Files="@(OldZipFiles)" />
	</Target>

</Project>
